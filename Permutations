     1) If we need to calculate the minimum number of swaps to change a permutation to another one. The idea is, we build a graph with undirected edges (a[i],b[i]). 
  The minimum number of swaps will be equal to n âˆ’ c, where c is equal to the number of connected components in the resulting graph.
  
  
     
const ll infll = 9e18;
const int inf = 2e9;
const ll maxn = 5e5 + 2;

int a[maxn], b[maxn];
vector<int> v[maxn];
bool vis[maxn];

void dfs(int x){
    if(vis[x])return;
    vis[x] = 1;
    for(auto u:v[x]){
        dfs(u);
    }
}


int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    cout<<fixed<<setprecision(15);

    
    int test = 1;
    //cin>>test;
    while(test--){
        int n;
        cin>>n;
        ll mx = 0;
        for(int i = 1; i <= n; ++i){
            cin>>a[i];
        }
        for(int i = 1; i <= n; ++i){
            cin>>b[i];
            v[a[i]].pb(b[i]);
            v[b[i]].pb(a[i]);
        }
        ll cnt = 0;
        for(int i = 1; i <= n; ++i){
            if(vis[i])continue;
            ++cnt;
            dfs(a[i]);
        }
        cnt = n - cnt;
        cout<<cnt<<'\n';
        
    }
    return 0;
}
